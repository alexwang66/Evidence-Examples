name: shani-evidence-build

on:
  workflow_dispatch
  # [push, workflow_dispatch]

permissions:
  actions: read           # for detecting the Github Actions environment
  id-token: write         # for creating OIDC tokens for signing
  packages: write         # for uploading attestations
  contents: read          # read the contents permission
  security-events: write  # for uploading code scanning

jobs:
  Docker-build-with-evidence:
    runs-on: ubuntu-latest
    steps:
      - name: Setup JFrog CLI 
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: https://${{ vars.JF_URL }}/
          #JF_PROJECT: ${{ vars.JF_PROJECT }}
        with:
            oidc-provider-name: shani-frogbot-integration
            oidc-audience: shani-audience
            version: latest

      - uses: actions/checkout@v4

      - name: Install SonarQube Scanner
        run: |          
          curl -sL  -sSLo sonar-scanner.zip  https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.2.1.4610.zip
          unzip sonar-scanner.zip
          export PATH=$PATH:$PWD/sonar-scanner-6.2.1.4610/bin
          pwd
          ls -l $PWD/sonar-scanner-6.2.1.4610/bin/
          echo "$PWD/sonar-scanner-6.2.1.4610/bin"
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '21' # Specify the desired Java version here
          distribution: 'temurin' # You can also use 'temurin', 'zulu', etc.

      - name: Run SonarScanner
        id: run-sonar-scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          $PWD/sonar-scanner-6.2.1.4610/bin/sonar-scanner \
            -Dsonar.projectKey=shaniil_Evidence-Examples \
            -Dsonar.organization=shaniil \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.java.jdkHome=$JAVA_HOME \
            -Dsonar.verbose=true \
            -Dsonar.token=$SONAR_TOKEN
          # create evidence from sonar-scan analysis
          #set +e
          # --FailOnAnalysisFailure causes a failure on gateway-failed sonar analysis 
          #./examples/sonar-scan-example/bin/sonar-scan-extractor-linux-amd64  --reportTaskFile=$PWD/.scannerwork/report-task.txt > predicate.json
          #EXIT_CODE=$?
          #set -e          
          
          REPORT=$(curl -s -u "$SONAR_TOKEN:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=shaniil_Evidence-Examples")
          echo "$REPORT" > sonar_report.txt
          echo "::set-output name=report_path::$(pwd)/sonar_report.txt"
          cat sonar_report.txt
          
          # write the exit code to the github output so that it can be used in the evidence creation step
          echo "------predicate.json------"
          cat predicate.json
          echo "------sonar-scan.log------"
          cat sonar-scan.log
          echo "------EXIT------"
          echo "create-sonar-evidence=$EXIT_CODE" 
          echo "create-sonar-evidence=$EXIT_CODE" >> $GITHUB_OUTPUT 

      - name: Docker Authenticate
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.JF_URL }}
          username: ${{ steps.setup-cli.outputs.oidc-user }}
          password: ${{ steps.setup-cli.outputs.oidc-token }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          install: true

      - name: Build Docker image
        run: |
          URL=$(echo ${{ vars.JF_URL }} | sed 's|^https://||')
          REPO_URL=${URL}'/shani-docker-dev-virtual'
          docker build --build-arg REPO_URL=${REPO_URL} -f Dockerfile . \
          --tag ${REPO_URL}/example-project-app:${{ github.run_number }} \
          --output=type=image --platform linux/amd64 --metadata-file=build-metadata --push
          cat build-metadata
          jf rt build-docker-create shani-docker-dev-virtual --image-file=build-metadata --build-name=${{ github.workflow }} --build-number=${{ github.run_number }}

      - name: Evidence on docker
        run: |
          echo '{ "actor": "${{ github.actor }}", "date": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'" }' > sign.json
          jf evd create --package-name example-project-app --package-version ${{ github.run_number }} --package-repo-name shani-docker-dev-local \
            --key "${{ secrets.PRIVATE_KEY }}" \
            --predicate ./sign.json --predicate-type https://jfrog.com/evidence/signature/v1 
          echo '🔎 Evidence attached: `signature` 🔏 ' 

      - name: Upload readme file
        run: |
          jf rt upload ./README.md shani-example-project-generic-dev/readme/${{ github.run_number }}/ --build-name=${{ github.workflow }} --build-number=${{ github.run_number }}
          jf evd create --subject-repo-path shani-example-project-generic-dev/readme/${{ github.run_number }}/README.md \
            --key "${{ secrets.PRIVATE_KEY }}" \
            --predicate ./sign.json --predicate-type https://jfrog.com/evidence/signature/v1

      - name: Publish build info
        run: jfrog rt build-publish ${{ github.workflow }} ${{ github.run_number }}

      - name: Sign build evidence
        run: |
          echo '{ "actor": "${{ github.actor }}", "date": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'" }' > sign.json
          jf evd create --build-name ${{ github.workflow }} --build-number ${{ github.run_number }} \
            --predicate ./sign.json --predicate-type https://jfrog.com/evidence/build-signature/v1 \
            --key "${{ secrets.PRIVATE_KEY }}"  --key-alias ${{ secrets.KEY_ALIAS }}
          echo '🔎 Evidence attached: `build-signature` 🔏 ' >> $GITHUB_STEP_SUMMARY

      - name: Create release bundle
        run: |
          echo '{ "files": [ {"build": "'"${{ github.workflow }}/${{ github.run_number }}"'" } ] }' > bundle-spec.json
          jf release-bundle-create --spec=bundle-spec.json --sync=true shani-evidence-example ${{ github.run_number }}
          VER_LINK=${{ vars.ARTIFACTORY_URL }}'/ui/artifactory/lifecycle/?bundleName='${{ github.actor }}-evidence-example'&bundleToFlash='${{ github.actor }}-evidence-example'&releaseBundleVersion='${{ github.run_number }}'&repositoryKey=release-bundles-v2&activeKanbanTab=promotion'
          echo '📦 Release bundle ['${{ github.actor }}-evidence-example:${{ github.run_number }}']('${VER_LINK}') created' >> $GITHUB_STEP_SUMMARY
          
      - name: Evidence on release-bundle v2
        run: |
           echo '{ "actor": "${{ github.actor }}", "date": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'", "approved": "true" }' > rbv2_approval_evidence.json
           jf evd create --key "${{ secrets.PRIVATE_KEY }}" --key-alias ${{ secrets.KEY_ALIAS }} \
             --release-bundle shani-evidence-example --release-bundle-version ${{ github.run_number }} \
             --predicate ./rbv2_approval_evidence.json --predicate-type https://jfrog.com/evidence/approval/v1
           echo 'Approval of Release bundle shani-evidence-example':'${{ github.run_number }} succeded' >> $GITHUB_STEP_SUMMARY
